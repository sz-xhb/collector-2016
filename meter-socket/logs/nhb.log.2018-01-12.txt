2018-01-12 16:39:53,145 INFO main (AbstractApplicationContext.java:510)
Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@17f6480: startup date [Fri Jan 12 16:39:53 CST 2018]; root of context hierarchy
2018-01-12 16:39:53,241 INFO main (XmlBeanDefinitionReader.java:315)
Loading XML bean definitions from file [E:\project\workspace\collector-2016\meter-socket\target\classes\spring-beans-config.xml]
2018-01-12 16:39:53,503 INFO main (XmlBeanDefinitionReader.java:315)
Loading XML bean definitions from file [E:\project\workspace\collector-2016\meter-socket\target\classes\spring-context-config.xml]
2018-01-12 16:39:54,006 INFO main (XmlBeanDefinitionReader.java:315)
Loading XML bean definitions from file [E:\project\workspace\collector-2016\meter-socket\target\classes\spring-tx-config.xml]
2018-01-12 16:39:54,422 INFO main (PropertiesLoaderSupport.java:172)
Loading properties file from class path resource [config.properties]
2018-01-12 16:39:54,428 INFO main (PropertiesLoaderSupport.java:172)
Loading properties file from class path resource [jdbc.properties]
2018-01-12 16:39:54,542 INFO main (DefaultListableBeanFactory.java:598)
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@2f177a4b: defining beans [dataSource,sessionFactory,transactionManager,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,applicationConfig,buildInfoDao,collectorStatusDAO,companyDAO,customerDAO,dataAmHarmDAO,dataElecOilDAO,dataElectricity3PhaseDAO,dataElectricityDAO,dataHarmonicDAO,dataLinbuDAO,dataRateDAO,dataSteamDAO,dataSwitchDAO,dataTemperatureDAO,dataWaterDAO,elecParamAnalyseDAO,meterStatusDAO,modbusGericProtocolDAO,packetRegisterRangeDAO,protocolTypeStandardDAO,receiptCircuitDAO,receiptCollectorDAO,receiptMeterDAO,buildInfoServiceImpl,collectorStatusServiceImpl,companyServiceImpl,customerServiceImpl,dataAmHarmServiceImpl,dataElecOilServiceImpl,dataElectricity3PhaseServiceImpl,dataElectricityServiceImpl,dataHarmonicServiceImpl,dataLingbuServiceImpl,dataRateServiceImpl,dataSteamServiceImpl,dataSwitchServiceImpl,dataTemperatureServiceImpl,dataWaterServiceImpl,elecParamAnalyseServiceImpl,meterStatusServiceImpl,modbusGericProtocolServiceImpl,packetRegisterRangeServiceImpl,protocolTypeStandardServiceImpl,receiptCircuitServiceImpl,receiptCollectorServiceImpl,receiptMeterServiceImpl,services,org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; root of factory hierarchy
2018-01-12 16:39:54,984 INFO main (Version.java:37)
HCANN000001: Hibernate Commons Annotations {4.0.2.Final}
2018-01-12 16:39:54,997 INFO main (Version.java:41)
HHH000412: Hibernate Core {4.2.12.Final}
2018-01-12 16:39:55,001 INFO main (Environment.java:238)
HHH000206: hibernate.properties not found
2018-01-12 16:39:55,004 INFO main (Environment.java:345)
HHH000021: Bytecode provider name : javassist
2018-01-12 16:39:55,993 INFO main (Dialect.java:130)
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2018-01-12 16:39:56,011 INFO main (LobCreatorBuilder.java:120)
HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2018-01-12 16:39:56,663 INFO main (TransactionFactoryInitiator.java:68)
HHH000399: Using default transaction strategy (direct JDBC transactions)
2018-01-12 16:39:56,672 INFO main (ASTQueryTranslatorFactory.java:48)
HHH000397: Using ASTQueryTranslatorFactory
2018-01-12 16:39:58,611 INFO main (HibernateTransactionManager.java:337)
Using DataSource [org.apache.commons.dbcp.BasicDataSource@323e8306] of Hibernate SessionFactory for HibernateTransactionManager
2018-01-12 16:39:59,390 INFO main (ApplicationContext.java:75)
a1
2018-01-12 16:39:59,489 INFO main (ApplicationContext.java:102)
{int[] data = new int[8];byte[] frame;data[0] = Integer.parseInt(receiptMeter.getMeterNo());data[1] = 0x03; data[2] = 0x00;  data[3] = 0x00;  data[4] = 0;  data[5] = 25;  int[] crc = CRC.calculateCRC(data, 6);  data[6] = crc[0];  data[7] = crc[1];  frame = new byte[data.length];  for (int i = 0; i < data.length; i++) {  	frame[i] = (byte) data[i];  }  writingFrames.add(frame); }
2018-01-12 16:39:59,491 INFO main (ApplicationContext.java:109)
{if (readingFrames.size() != 1) { return false; }  int[] data = new int[frame.length - 9]; for (int i = 0; i < data.length; i++) { data[i] = frame[i + 8] & 0xFF;}  int meterNo = Integer.parseInt(receiptMeter.getMeterNo());  if(meterNo != data[0]){  return false;  }  if (!CRC.isValid(data))  return false;if (data[2] == 50) { } return true;}
2018-01-12 16:39:59,502 INFO main (ApplicationContext.java:116)
{}
2018-01-12 16:39:59,503 INFO main (ApplicationContext.java:117)
{List receipCircuits = doGetReceiptCicuirt();Date now = new Date();for(int i = 0; i < receipCircuits.size() ; i++ ){ReceiptCircuit receiptCircuit = (ReceiptCircuit)receipCircuits.get(i);DataElectricity3Phase dataElectricity3Phase = null;DataElectricity dataElectricity = new DataElectricity();dataElectricity.setReceiptCircuit(receiptCircuit);dataElectricity.setReadTime(now);dataElectricity.setElectricityType(ElectricityType.AC_THREE);saveDataToDataBase(dataElectricity,dataElectricity3Phase);}}
2018-01-12 16:39:59,504 INFO main (ApplicationContext.java:75)
è¡¨0006
2018-01-12 16:39:59,508 INFO main (ApplicationContext.java:102)
{int[] data = new int[8];byte[] frame;data[0] = Integer.parseInt(receiptMeter.getMeterNo());data[1] = 0x03; data[2] = 0x00;  data[3] = 0x02;  data[4] = 0;  data[5] = 73;  int[] crc = CRC.calculateCRC(data, 6);  data[6] = crc[0];  data[7] = crc[1];  frame = new byte[data.length];  for (int i = 0; i < data.length; i++) {  	frame[i] = (byte) data[i];  }  writingFrames.add(frame); }
2018-01-12 16:39:59,527 INFO main (ApplicationContext.java:109)
{if (readingFrames.size() != 1) { return false; }  int[] data = new int[frame.length - 9]; for (int i = 0; i < data.length; i++) { data[i] = frame[i + 8] & 0xFF;}  int meterNo = Integer.parseInt(receiptMeter.getMeterNo());  if(meterNo != data[0]){  return false;  }  if (!CRC.isValid(data))  return false;if (data[2] == 146) { Ubb_1=data[3] * 256 + data[4] ; Ibb_1=data[5] * 256 + data[6] ; voltageA_1=data[39] * 256 + data[40] ; voltageB_1=data[41] * 256 + data[42] ; voltageC_1=data[43] * 256 + data[44] ; voltageAB_1=data[45] * 256 + data[46] ; voltageBC_1=data[47] * 256 + data[48] ; voltageCA_1=data[49] * 256 + data[50] ; currentA_1=data[51] * 256 + data[52] ; currentB_1=data[53] * 256 + data[54] ; currentC_1=data[55] * 256 + data[56] ; kwA_1=data[59] * 256 + data[60] ; kwB_1=data[61] * 256 + data[62] ; kwC_1=data[63] * 256 + data[64] ; kw_1=data[65] * 256 + data[66] ; kvarA_1=data[67] * 256 + data[68] ; kvarB_1=data[69] * 256 + data[70] ; kvar_1=data[73] * 256 + data[74] ; kvarC_1=data[71] * 256 + data[72] ; kvaA_1=data[75] * 256 + data[76] ; kvaB_1=data[77] * 256 + data[78] ; kvaC_1=data[79] * 256 + data[80] ; kva_1=data[81] * 256 + data[82] ; frequency_1=data[91] * 256 + data[92] ; kwhForward_1=data[93] * 256 * 256 * 256 + data[94] * 256 * 256 + data[95] * 256 + data[96] ; kwhReverse_1=data[99] * 256 * 256 * 256 + data[100] * 256 * 256 + data[101] * 256 + data[102] ; kwh_1=data[117] * 256 * 256 * 256 + data[118] * 256 * 256 + data[119] * 256 + data[120] ; powerFactorA_1=data[83] * 256 + data[84] ; powerFactorB_1=data[85] * 256 + data[86] ; powerFactorC_1=data[87] * 256 + data[88] ; powerFactor_1=data[89] * 256 + data[90] ; } return true;}
2018-01-12 16:39:59,551 INFO main (ApplicationContext.java:116)
{Ubb_1= Ubb_1;Ibb_1= Ibb_1;voltageA_1= voltageA_1* Ubb_1/10;voltageB_1= voltageB_1* Ubb_1/10;voltageC_1= voltageC_1* Ubb_1/10;voltageAB_1= voltageAB_1* Ubb_1/10;voltageBC_1= voltageBC_1* Ubb_1/10;voltageCA_1= voltageCA_1* Ubb_1/10;currentA_1= currentA_1* Ibb_1/1000;currentB_1= currentB_1* Ibb_1/1000;currentC_1= currentC_1* Ibb_1/1000;kwA_1= kwA_1/10;kwB_1= kwB_1/10;kwC_1= kwC_1/10;kw_1= kw_1/10;kvarA_1= kvarA_1/10;kvarB_1= kvarB_1/10;kvar_1= kvar_1/10;kvarC_1= kvarC_1;kvaA_1= kvaA_1;kvaB_1= kvaB_1;kvaC_1= kvaC_1;kva_1= kva_1;frequency_1= frequency_1/100;kwhForward_1= kwhForward_1;kwhReverse_1= kwhReverse_1;kwh_1= kwh_1;powerFactorA_1= powerFactorA_1;powerFactorB_1= powerFactorB_1;powerFactorC_1= powerFactorC_1;powerFactor_1= powerFactor_1;}
2018-01-12 16:39:59,552 INFO main (ApplicationContext.java:117)
{List receipCircuits = doGetReceiptCicuirt();Date now = new Date();for(int i = 0; i < receipCircuits.size() ; i++ ){ReceiptCircuit receiptCircuit = (ReceiptCircuit)receipCircuits.get(i);DataElectricity3Phase dataElectricity3Phase = null;DataElectricity dataElectricity = new DataElectricity();dataElectricity.setReceiptCircuit(receiptCircuit);dataElectricity.setReadTime(now);dataElectricity.setElectricityType(ElectricityType.AC_THREE);if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setVoltageA(new Double(voltageA_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setVoltageB(new Double(voltageB_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setVoltageC(new Double(voltageC_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setVoltageAB(new Double(voltageAB_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setVoltageBC(new Double(voltageBC_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setVoltageCA(new Double(voltageCA_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setCurrentA(new Double(currentA_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setCurrentB(new Double(currentB_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setCurrentC(new Double(currentC_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKwA(new Double(kwA_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKwB(new Double(kwB_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKwC(new Double(kwC_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKw(new Double(kw_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKvarA(new Double(kvarA_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKvarB(new Double(kvarB_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKvar(new Double(kvar_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKvarC(new Double(kvarC_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKvaA(new Double(kvaA_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKvaB(new Double(kvaB_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKvaC(new Double(kvaC_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKva(new Double(kva_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setFrequency(new Double(frequency_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKwhForward(new Double(kwhForward_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKwhReverse(new Double(kwhReverse_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKwh(new Double(kwh_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setPowerFactorA(new Double(powerFactorA_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setPowerFactorB(new Double(powerFactorB_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setPowerFactorC(new Double(powerFactorC_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setPowerFactor(new Double(powerFactor_1));}saveDataToDataBase(dataElectricity,dataElectricity3Phase);}}
2018-01-12 16:39:59,559 INFO main (ApplicationContext.java:75)
ç´æµè¡¨
2018-01-12 16:39:59,562 INFO main (ApplicationContext.java:102)
{int[] data = new int[8];byte[] frame;data[0] = Integer.parseInt(receiptMeter.getMeterNo());data[1] = 0x03; data[2] = 0x10;  data[3] = 0x05;  data[4] = 0;  data[5] = 5;  int[] crc = CRC.calculateCRC(data, 6);  data[6] = crc[0];  data[7] = crc[1];  frame = new byte[data.length];  for (int i = 0; i < data.length; i++) {  	frame[i] = (byte) data[i];  }  writingFrames.add(frame); }
2018-01-12 16:39:59,564 INFO main (ApplicationContext.java:109)
{if (readingFrames.size() != 1) { return false; }  int[] data = new int[frame.length - 9]; for (int i = 0; i < data.length; i++) { data[i] = frame[i + 8] & 0xFF;}  int meterNo = Integer.parseInt(receiptMeter.getMeterNo());  if(meterNo != data[0]){  return false;  }  if (!CRC.isValid(data))  return false;if (data[2] == 10) { voltage_1=data[3] * 256 + data[4] ; current_1=data[5] * 256 + data[6] ; kw_1=data[7] * 256 + data[8] ; kwh_1=data[9] * 256 * 256 * 256 + data[10] * 256 * 256 + data[11] * 256 + data[12] ; } return true;}
2018-01-12 16:39:59,567 INFO main (ApplicationContext.java:116)
{voltage_1= voltage_1;current_1= current_1;kw_1= kw_1;kwh_1= kwh_1;}
2018-01-12 16:39:59,567 INFO main (ApplicationContext.java:117)
{List receipCircuits = doGetReceiptCicuirt();Date now = new Date();for(int i = 0; i < receipCircuits.size() ; i++ ){ReceiptCircuit receiptCircuit = (ReceiptCircuit)receipCircuits.get(i);DataElectricity3Phase dataElectricity3Phase = null;DataElectricity dataElectricity = new DataElectricity();dataElectricity.setReceiptCircuit(receiptCircuit);dataElectricity.setReadTime(now);dataElectricity.setElectricityType(ElectricityType.DC);if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setVoltage(new Double(voltage_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setCurrent(new Double(current_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKw(new Double(kw_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKwh(new Double(kwh_1));}saveDataToDataBase(dataElectricity,dataElectricity3Phase);}}
2018-01-12 16:39:59,568 INFO main (ApplicationContext.java:75)
è¡¨0007
2018-01-12 16:39:59,571 INFO main (ApplicationContext.java:102)
{int[] data = new int[8];byte[] frame;data[0] = Integer.parseInt(receiptMeter.getMeterNo());data[1] = 0x03; data[2] = 0x00;  data[3] = 0x20;  data[4] = 0;  data[5] = 4;  int[] crc = CRC.calculateCRC(data, 6);  data[6] = crc[0];  data[7] = crc[1];  frame = new byte[data.length];  for (int i = 0; i < data.length; i++) {  	frame[i] = (byte) data[i];  }  writingFrames.add(frame);  data[2] = 0x10;  data[3] = 0x80;  data[4] = 0;  data[5] = 2;  int[] crc = CRC.calculateCRC(data, 6);  data[6] = crc[0];  data[7] = crc[1];  frame = new byte[data.length];  for (int i = 0; i < data.length; i++) {  	frame[i] = (byte) data[i];  }  writingFrames.add(frame);  data[2] = 0x20;  data[3] = 0x60;  data[4] = 0;  data[5] = 6;  int[] crc = CRC.calculateCRC(data, 6);  data[6] = crc[0];  data[7] = crc[1];  frame = new byte[data.length];  for (int i = 0; i < data.length; i++) {  	frame[i] = (byte) data[i];  }  writingFrames.add(frame); }
2018-01-12 16:39:59,574 INFO main (ApplicationContext.java:109)
{if (readingFrames.size() != 3) { return false; }  int[] data = new int[frame.length - 9]; for (int i = 0; i < data.length; i++) { data[i] = frame[i + 8] & 0xFF;}  int meterNo = Integer.parseInt(receiptMeter.getMeterNo());  if(meterNo != data[0]){  return false;  }  if (!CRC.isValid(data))  return false;if (data[2] == 8) { voltage_1=data[3] * 256 + data[4] ; current_1=data[5] * 256 + data[6] ; kw_1=data[7] * 256 + data[8] ; frequency_1=data[9] * 256 + data[10] ; }if (data[2] == 4) { Ubb_1=data[3] * 256 + data[4] ; Ibb_1=data[5] * 256 + data[6] ; }if (data[2] == 12) { kwhForward_1=data[3] * 256 * 256 * 256 + data[4] * 256 * 256 + data[5] * 256 + data[6] ; kwhReverse_1=data[7] * 256 * 256 * 256 + data[8] * 256 * 256 + data[9] * 256 + data[10] ; kwh_1=data[11] * 256 * 256 * 256 + data[12] * 256 * 256 + data[13] * 256 + data[14] ; } return true;}
2018-01-12 16:39:59,579 INFO main (ApplicationContext.java:116)
{voltage_1= voltage_1* Ubb_1/10;current_1= current_1* Ibb_1/100;kw_1= kw_1* Ubb_1* Ibb_1/1000;frequency_1= frequency_1/100;Ubb_1= Ubb_1;Ibb_1= Ibb_1;kwhForward_1= kwhForward_1* Ubb_1* Ibb_1/100;kwhReverse_1= kwhReverse_1* Ubb_1* Ibb_1/100;kwh_1= kwh_1* Ubb_1* Ibb_1/100;}
2018-01-12 16:39:59,589 INFO main (ApplicationContext.java:117)
{List receipCircuits = doGetReceiptCicuirt();Date now = new Date();for(int i = 0; i < receipCircuits.size() ; i++ ){ReceiptCircuit receiptCircuit = (ReceiptCircuit)receipCircuits.get(i);DataElectricity3Phase dataElectricity3Phase = null;DataElectricity dataElectricity = new DataElectricity();dataElectricity.setReceiptCircuit(receiptCircuit);dataElectricity.setReadTime(now);dataElectricity.setElectricityType(ElectricityType.AC_SINGLE);if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setVoltage(new Double(voltage_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setCurrent(new Double(current_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKw(new Double(kw_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setFrequency(new Double(frequency_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKwhForward(new Double(kwhForward_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKwhReverse(new Double(kwhReverse_1));}if(receiptCircuit.getCircuitNo().equals("1")){dataElectricity.setKwh(new Double(kwh_1));}saveDataToDataBase(dataElectricity,dataElectricity3Phase);}}
